import openstack

conn = openstack.connect()

def create_security_group(group_name):
    sec_group = conn.network.find_security_group(group_name)
    if sec_group:
        print(f"Using existing security group: {group_name}")
        return sec_group
    sec_group = conn.network.create_security_group(name=group_name, description="Allow intra- and inter-VN traffic")
    print(f"Created security group: {group_name}")
    return sec_group

def allow_icmp(sec_group, server_name):
    conn.network.create_security_group_rule(
        security_group_id=sec_group.id,
        direction="ingress",
        protocol="icmp",
        ethertype="IPv4"
    )
    print(f"Added ICMP rule to security group: {sec_group.name}")

def allow_ssh(sec_group, server_name):
    conn.network.create_security_group_rule(
        security_group_id=sec_group.id,
        direction="ingress",
        protocol="tcp",
        port_range_min=22,
        port_range_max=22,
        ethertype="IPv4"
    )
    print(f"Added SSH rule to security group: {sec_group.name}")

def allow_tcp(sec_group, server_name):
    conn.network.create_security_group_rule(
        security_group_id=sec_group.id,
        direction="ingress",
        protocol="tcp",
        port_range_min=1,
        port_range_max=65535,
        remote_ip_prefix="0.0.0.0/0",  # Allow all — can restrict by subnet if needed
        ethertype="IPv4"
    )
    print(f"Added TCP rule to security group: {sec_group.name}")

def allow_udp(sec_group, server_name):
    conn.network.create_security_group_rule(
        security_group_id=sec_group.id,
        direction="ingress",
        protocol="udp",
        port_range_min=1,
        port_range_max=65535,
        remote_ip_prefix="0.0.0.0/0",  # Allow all — can restrict by subnet if needed
        ethertype="IPv4"
    )
    print(f"Added UDP rule to security group: {sec_group.name}")


    
